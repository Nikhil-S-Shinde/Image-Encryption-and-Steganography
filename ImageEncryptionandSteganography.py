# -*- coding: utf-8 -*-
"""CryptoProject.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tW5TCOfbxjdD5XjUR6czIVXCUIQEzIhE
"""

import numpy as np
from PIL import Image
import matplotlib.pyplot as plt
import io

def image_to_array(image_path):
    img = Image.open(image_path)
    img_array = np.array(img)
    return img_array.flatten().tolist()

def array_to_image(array, width, height):
    img_array = np.array(array).reshape(height, width, 3)
    return Image.fromarray(np.uint8(img_array))

input_image_path = "image1.2.jpeg"
decrypted_image_path = "decrypted_image.jpg"

inp_image = Image.open(input_image_path)
input_width, input_height = inp_image.size
print(input_width," ",input_height)

# image to array
image_array = image_to_array(input_image_path)
image_array

"""#Encryption"""

KEY = [0x12345678, 0x9abcdef1, 0x23456789, 0xabcdef12]
DELTA = 0x9E3779B9

def encrypt(plaintext, key):
    encrypted_data = []

    for i in range(0, len(plaintext), 2): #Divide into blocks
        if i + 1 < len(plaintext):
            v0, v1 = plaintext[i], plaintext[i + 1]
        else:
            v0, v1 = plaintext[i], 0

        sum = 0
        for _ in range(32): #encrypt
            sum += DELTA
            v0 += ((v1 << 4) + key[0]) ^ (v1 + sum) ^ ((v1 >> 5) + key[1])
            v1 += ((v0 << 4) + key[2]) ^ (v0 + sum) ^ ((v0 >> 5) + key[3])

        encrypted_data.extend([v0, v1])

    return encrypted_data

encrypted_data = encrypt(image_array, KEY)

encrypted_data

import hashlib
# original -> reduced
mapping = {}

def Reduce(num):
    hashed = hashlib.md5(str(num).encode()).hexdigest()[:3]
    return int(hashed, 16)


encrypted_data_reduced = []
for num in encrypted_data:
    reduced_num = Reduce(num)
    encrypted_data_reduced.append(reduced_num)
    mapping[reduced_num] = num

encrypted_data_reduced

type(encrypted_data_reduced[0])

"""#Steganography"""

!pip install stegano

from stegano import lsb

"""##EMBED"""

cover_image_path = "/content/cover_image.jpg"

encrypted_data_reduced_str = [str(num) for num in encrypted_data_reduced]

secret_image = lsb.hide(cover_image_path, " ".join(encrypted_data_reduced_str))
secret_image.save("encoded_image.png")

"""##Extract"""

data = lsb.reveal("/content/encoded_image.png")
data = data.split()

extracted_data = []
for val in data:
  extracted_data.append(int(val)) #gives encrypted_data_Reduced

# convert to original
original_list = [mapping[num] for num in extracted_data]
original_list

print(len(original_list))
print(len(encrypted_data))

"""#Decrypt"""

def decrypt(encrypted_data, key):
    decrypted_data = []

    for i in range(0, len(encrypted_data), 2):
        v0, v1 = encrypted_data[i], encrypted_data[i + 1]

        sum = DELTA * 32
        for _ in range(32):
            v1 -= ((v0 << 4) + key[2]) ^ (v0 + sum) ^ ((v0 >> 5) + key[3])
            v0 -= ((v1 << 4) + key[0]) ^ (v1 + sum) ^ ((v1 >> 5) + key[1])
            sum -= DELTA

        decrypted_data.extend([v0, v1])

    return decrypted_data

decrypted_data = decrypt(encrypted_data, KEY)
decrypted_data

decrypted_image = array_to_image(decrypted_data, input_width, input_height)
decrypted_image.save(decrypted_image_path)